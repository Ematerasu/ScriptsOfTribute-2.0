{
    "scripts": [
        {
            "fileName": "AIManager.cs",
            "path": "Assets\\Scripts\\AI\\AIManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "AIManager",
            "methods": [
                "private void Awake()",
                "public void InitializeBot(Type botType, PlayerEnum botId)",
                "public void InitializeManager(SoTGameManager gameManager)",
                "public bool IsAITurn()",
                "public void PickOnePatron(List<PatronId> availablePatrons, int round, Action<PatronId> onResult)",
                "public void PlaySingleMove()",
                "public void PlayFullTurn()",
                "public IEnumerator PregamePrepareCoroutine()",
                "public IEnumerator SelectPatronCoroutine(List<PatronId> availablePatrons, int round, Action<PatronId> onResult)",
                "private IEnumerator PlaySingleMoveCoroutine()",
                "private IEnumerator PlayFullTurnCoroutine()",
                "private IEnumerator GetMoveFromBotCoroutine(GameState state, List<Move> legalMoves, Action<Move> onResult)",
                "public IEnumerator GameEndCoroutine(EndGameState result, FullGameState? finalBoardState)",
                "public AI CreateBotByType(BotType botType)",
                "private void OnApplicationQuit()",
                "private void OnDisable()",
                "private void TrySendGameEndIfGrpcBot()"
            ],
            "fields": [
                "[SerializeField] private CompletedActionProcessor completedActionProcessor; private AI _bot;",
                "private PlayerEnum _aiPlayer;",
                "private SoTGameManager _gameManager;"
            ]
        },
        {
            "fileName": "BotType.cs",
            "path": "Assets\\Scripts\\AI\\BotType.cs",
            "namespaceName": "",
            "kind": "enum",
            "typeName": "BotType",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ProjectileSoundTrigger.cs",
            "path": "Assets\\Scripts\\Audio\\ProjectileSoundTrigger.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "ProjectileSoundTrigger",
            "methods": [
                "private IEnumerator Start()"
            ],
            "fields": [
                "public float delay = 0.01f;"
            ]
        },
        {
            "fileName": "BoardManager.cs",
            "path": "Assets\\Scripts\\Board\\BoardManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "BoardManager",
            "methods": [
                "[Header(\"Player Zones\")] [SerializeField] private Transform playerDrawPile; [SerializeField] private Transform playerCooldown; [SerializeField] private Transform playerHand; [SerializeField] private Transform playerPlayed; [SerializeField] private Transform playerAgents; [Header(\"Enemy Zones\")] [SerializeField] private Transform enemyDrawPile; [SerializeField] private Transform enemyCooldown; [SerializeField] private Transform enemyHand; [SerializeField] private Transform enemyPlayed; [SerializeField] private Transform enemyAgents; [Header(\"Tavern\")] [SerializeField] private Transform tavernPile; [SerializeField] private List<Transform> tavernCardSpots; [Header(\"UI\")] [SerializeField] private TextMeshProUGUI playerGold; [SerializeField] private TextMeshProUGUI playerPrestige; [SerializeField] private TextMeshProUGUI playerPower; [SerializeField] private TextMeshProUGUI playerPatronCalls; [SerializeField] private TextMeshProUGUI enemyGold; [SerializeField] private TextMeshProUGUI enemyPrestige; [SerializeField] private TextMeshProUGUI enemyPower; [SerializeField] private TextMeshProUGUI enemyPatronCalls; [Header(\"Prefabs / Pool\")] [SerializeField] private GameObject cardPrefab; [SerializeField] private Transform offscreenCardContainer; [SerializeField] private Transform powerOriginPointPlayer1; [SerializeField] private Transform powerOriginPointPlayer2; [SerializeField] private GameObject powerProjectilePrefab; public bool HasCardObject(UniqueId id) => cardObjects.ContainsKey(id);",
                "public GameObject GetCardObject(UniqueId id) => cardObjects[id];",
                "private void Awake()",
                "public void RegisterPatronTransform(PatronId patronId, Transform transform)",
                "public void ClearBoard()",
                "public void InitializeBoard(FullGameState state)",
                "public void UpdateBoard(FullGameState state, UpdateReason reason)",
                "private void SetupPlayer(SerializedPlayer playerData, bool isPlayer)",
                "private void SetupTavern(FullGameState state)",
                "private void SetUpUI(FullGameState state)",
                "private GameObject CreateCardObject(UniqueCard cardData, Transform parentTransform)",
                "public void CreateCardObjectFromRuntime(UniqueCard card, ZoneType initialZone, ZoneSide side)",
                "public void MoveCardToZone(UniqueId cardId, Transform targetZone, ZoneType zoneType, ZoneSide zoneSide, System.Action? onComplete = null)",
                "public Transform GetZoneTransform(ZoneType zone, ZoneSide side)",
                "public List<Card> GetCardsInZone(ZoneType zone, ZoneSide side)",
                "private Transform FindFirstFreeTavernSpot()",
                "public IEnumerator AnimateAddCardToTavernDelayed(UniqueId card)",
                "public void DestroyCards(List<UniqueCard> cardsToDestroy)",
                "private IEnumerator UpdateAgentHealthCoroutine(FullGameState state)",
                "public void DebugCheckHandSync(FullGameState state)"
            ],
            "fields": [
                "private HashSet<Transform> reservedTavernSpots = new();"
            ]
        },
        {
            "fileName": "BoardManager.cs",
            "path": "Assets\\Scripts\\Board\\BoardManager.cs",
            "namespaceName": "",
            "kind": "enum",
            "typeName": "UpdateReason",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "CardLayoutManager.cs",
            "path": "Assets\\Scripts\\Board\\CardLayoutManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardLayoutManager",
            "methods": [
                "private void Awake()",
                "public void ScheduleLayout(ZoneType zone, ZoneSide side)",
                "private void LateUpdate()",
                "private void ArrangeHand(ZoneSide side)",
                "private void ArrangeAgents(ZoneSide side)"
            ],
            "fields": []
        },
        {
            "fileName": "CardZone.cs",
            "path": "Assets\\Scripts\\Board\\CardZone.cs",
            "namespaceName": "",
            "kind": "enum",
            "typeName": "ZoneType",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "CardZone.cs",
            "path": "Assets\\Scripts\\Board\\CardZone.cs",
            "namespaceName": "",
            "kind": "enum",
            "typeName": "ZoneSide",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "CardZone.cs",
            "path": "Assets\\Scripts\\Board\\CardZone.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardZone",
            "methods": [],
            "fields": [
                "public ZoneType zoneType;",
                "public ZoneSide zoneSide;"
            ]
        },
        {
            "fileName": "CompletedActionProcessor.cs",
            "path": "Assets\\Scripts\\Board\\CompletedActionProcessor.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CompletedActionProcessor",
            "methods": [
                "private void Update()",
                "private void ClearProcessor()",
                "public void SetInitialSnapshot(FullGameState state)",
                "public void CompareAndQueueChanges(FullGameState newState)",
                "private void CompareAndQueue(HashSet<UniqueId> previousSet, List<UniqueCard> currentList, ZoneType zoneType, ZoneSide zoneSide, HashSet<UniqueId> storage)",
                "private void CompareAndQueueAgents(HashSet<(UniqueId, bool, int)> previousSet, List<SerializedAgent> currentAgents, int enemyPowerDiff, ZoneSide side, HashSet<(UniqueId, bool, int)> storage)",
                "private void Start()",
                "private IEnumerator ConsumeQueue()",
                "private ZoneType GetSourceOfCreatedCard(UniqueCard card)"
            ],
            "fields": [
                "private Queue<VisualCommand> _visualQueue = new();",
                "private HashSet<UniqueId> _prevPlayer1Hand = new();",
                "private HashSet<UniqueId> _prevPlayer1Played = new();",
                "private HashSet<UniqueId> _prevPlayer1Cooldown = new();",
                "private HashSet<UniqueId> _prevPlayer1Draw = new();",
                "private int _prevPlayer1Power = 0;",
                "private HashSet<UniqueId> _prevPlayer2Hand = new();",
                "private HashSet<UniqueId> _prevPlayer2Played = new();",
                "private HashSet<UniqueId> _prevPlayer2Cooldown = new();",
                "private HashSet<UniqueId> _prevPlayer2Draw = new();",
                "private int _prevPlayer2Power = 0;",
                "private HashSet<UniqueId> _prevTavernAvailable = new();",
                "private HashSet<UniqueId> _prevTavernPile = new();",
                "public bool IsBusy => _visualQueue.Count > 0;",
                "public int ElementsInQueue => _visualQueue.Count;"
            ]
        },
        {
            "fileName": "PatronManager.cs",
            "path": "Assets\\Scripts\\Board\\PatronManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "PatronManager",
            "methods": [
                "[SerializeField] private GameObject patronPrefab; [SerializeField] private Transform[] patronSlots = new Transform[5]; [SerializeField] private SoTGameManager soTGameManager; public void InitializePatrons(PatronId[] patronIds)",
                "public PlayerEnum GetFavorable(PatronId patronId)",
                "public void UpdateObjects(PatronStates newStates)",
                "private Sprite LoadPatronSprite(PatronId patronId)"
            ],
            "fields": []
        },
        {
            "fileName": "VisualCommands.cs",
            "path": "Assets\\Scripts\\Board\\VisualCommands.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "VisualCommand",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "VisualCommands.cs",
            "path": "Assets\\Scripts\\Board\\VisualCommands.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "MoveCardCommand",
            "methods": [],
            "fields": [
                "private UniqueId _cardId;",
                "private ZoneType _zone;",
                "private ZoneSide _side;"
            ]
        },
        {
            "fileName": "VisualCommands.cs",
            "path": "Assets\\Scripts\\Board\\VisualCommands.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "PlayProjectileCommand",
            "methods": [],
            "fields": [
                "private UniqueId _targetCardId;",
                "private ZoneSide _side;"
            ]
        },
        {
            "fileName": "VisualCommands.cs",
            "path": "Assets\\Scripts\\Board\\VisualCommands.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "PlayHealingEffectCommand",
            "methods": [],
            "fields": [
                "private UniqueId _targetCardId;",
                "private ZoneSide _side;"
            ]
        },
        {
            "fileName": "VisualCommands.cs",
            "path": "Assets\\Scripts\\Board\\VisualCommands.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "ShowAgentActivationCommand",
            "methods": [],
            "fields": [
                "private GameObject _cardObject;",
                "private bool _activate;"
            ]
        },
        {
            "fileName": "CameraDrag.cs",
            "path": "Assets\\Scripts\\Camera\\CameraDrag.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CameraDrag",
            "methods": [],
            "fields": [
                "public float moveSpeed = 5f;",
                "public float edgeThreshold = 50f;",
                "public SpriteRenderer BoardSprite;",
                "private Vector3 lowBounds => BoardSprite.bounds.min;",
                "private Vector3 highBounds => BoardSprite.bounds.max;"
            ]
        },
        {
            "fileName": "Card.cs",
            "path": "Assets\\Scripts\\Cards\\Card.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "Card",
            "methods": [
                "public void SetLayoutPosition(Vector3 pos) => _layoutPosition = pos;",
                "public Vector3 GetLayoutPosition() => _layoutPosition;",
                "public Sprite GetOriginalSprite() => _originalSprite;",
                "public void Start()",
                "[ContextMenu(\"Test Activation Effect\")] public void TestActivationEffect()",
                "public UniqueCard GetCard()",
                "public void SetAnimating(bool value)",
                "public bool IsAnimating()",
                "public void SetVisible(bool visible)",
                "public bool IsVisible()",
                "public void InitializeCard(UniqueCard card)",
                "public void UpdateAgentHealth(SerializedAgent agent)",
                "private void LoadCardSprite(PatronId deck, CardId cardId)",
                "private void ClearTextFields()",
                "public void SetZoneInfo(ZoneType type, ZoneSide side)",
                "public bool IsInPlayerHand()",
                "public bool IsInEnemyHand()",
                "public bool IsInTavern()",
                "public bool IsInZone(ZoneType type, ZoneSide side)",
                "public bool ShouldBeVisible()",
                "public void ShowActivationEffect()",
                "public void RemoveActivationEffect()"
            ],
            "fields": [
                "public SpriteRenderer spriteRenderer;",
                "public TextMeshPro hpText;",
                "public Vector3 DefaultScale => _scale;",
                "public Vector3 ShrinkedScale => _scale * 0.6f;",
                "private UniqueCard _card;",
                "[field: SerializeField] private bool _isAnimating = false;",
                "private bool _isVisible = true;",
                "private Sprite _originalSprite;",
                "private Material _originalMaterial;",
                "private Vector3 _scale;",
                "[SerializeField] private ZoneType _zoneType; [SerializeField] private ZoneSide _zoneSide; public ZoneType ZoneType => _zoneType;",
                "public ZoneSide ZoneSide => _zoneSide;",
                "[SerializeField] private Sprite backSprite; [SerializeField] private Material activationMaterial; private Vector3 _layoutPosition;"
            ]
        },
        {
            "fileName": "CardLayoutBehaviour.cs",
            "path": "Assets\\Scripts\\Cards\\CardLayoutBehaviour.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardLayoutBehaviour",
            "methods": [
                "private void Awake()",
                "private void Start()",
                "public void ApplyLayout()",
                "public void OnPointerEnter(PointerEventData eventData)",
                "public void OnPointerExit(PointerEventData eventData)",
                "public void SetSortingOrder(int baseOrder)",
                "public void SetSortingLayer(string layerName)"
            ],
            "fields": [
                "[SerializeField] private float playerHandScale = 1.0f; [SerializeField] private float playerPlayedScale = 0.7f; [SerializeField] private float playerAgentScale = 0.8f; [SerializeField] private float enemyHandScale =  0.65f; [SerializeField] private float enemyPlayedScale = 0.5f; [SerializeField] private float enemyAgentScale = 0.575f; private Vector3 defaultScale;",
                "private int _originalSortingOrder;",
                "private bool _isHovered;",
                "private SpriteRenderer _spriteRenderer;",
                "[SerializeField] private TextMeshPro _hpText; [SerializeField] private float defaultPlayerRotation = 0f; [SerializeField] private float defaultEnemyRotation = 180f; [SerializeField] private float scaleFactor = 1.5f; [SerializeField] private int hoverSortingOrder = 100; private Card _card;"
            ]
        },
        {
            "fileName": "CardController.cs",
            "path": "Assets\\Scripts\\Controllers\\CardController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardController",
            "methods": [
                "public void OnPointerClick(PointerEventData eventData)",
                "public void OnPointerExit(PointerEventData eventData)",
                "private bool IsInPileZone(Card card)",
                "private void HandleLeftClick()",
                "private void HandleRightClick()"
            ],
            "fields": [
                "public Card card;"
            ]
        },
        {
            "fileName": "CardTooltip.cs",
            "path": "Assets\\Scripts\\Controllers\\CardTooltip.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardTooltip",
            "methods": [
                "[SerializeField] private TextMeshProUGUI cardNameText; [SerializeField] private TextMeshProUGUI deckText; [SerializeField] private TextMeshProUGUI typeText; [SerializeField] private TextMeshProUGUI effectText; public void Setup(UniqueCard card)",
                "private string BuildEffectText(UniqueCard card)",
                "private string EffectToString(UniqueComplexEffect effect)",
                "public void SetPositionRelativeTo(Transform cardTransform)",
                "private string EffectDescription(EffectType type, int value)",
                "private Vector2 AdjustYToStayInCanvas(Vector2 anchoredPos, RectTransform tooltipRT, RectTransform canvasRT)"
            ],
            "fields": []
        },
        {
            "fileName": "PileZoneClickable.cs",
            "path": "Assets\\Scripts\\Controllers\\PileZoneClickable.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "PileZoneClickable",
            "methods": [
                "[SerializeField] private ZoneSide zoneSide; [SerializeField] private PileType pileType; public void OnClickedFromCard()"
            ],
            "fields": []
        },
        {
            "fileName": "PileZoneClickable.cs",
            "path": "Assets\\Scripts\\Controllers\\PileZoneClickable.cs",
            "namespaceName": "",
            "kind": "enum",
            "typeName": "PileType",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "AudioManager.cs",
            "path": "Assets\\Scripts\\Gameplay\\AudioManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "AudioManager",
            "methods": [
                "public void ApplyVolumes()",
                "public void PlaySound(AudioClip clip, float volume=1f)",
                "public void PlayMusic(AudioClip clip)",
                "public void PlayCardPlaySfx()",
                "public void PlayCardDrawSfx()",
                "public void PlayCardBuySfx()",
                "public void PlayPatronActivateSfx()",
                "public void PlayYourTurnSfx()",
                "public void PlayMainMenuMusic()",
                "public void PlayGameMusic()",
                "public void PlayProjectileSound()",
                "public void SwapMusic(AudioClip newClip, float fadeDuration = 0.5f)",
                "private IEnumerator SwapMusicCoroutine(AudioClip newClip, float fadeDuration)"
            ],
            "fields": [
                "[Header(\"Audio Sources\")] public AudioSource sfxSource;",
                "public AudioSource musicSource;",
                "[Header(\"Clips\")] public AudioClip cardPlay;",
                "public AudioClip cardDraw;",
                "public AudioClip cardBuy;",
                "public AudioClip patronActivate;",
                "public AudioClip mainMenuMusic;",
                "public AudioClip gameMusic;",
                "public AudioClip projectileSound;",
                "public AudioClip endTurnSound;",
                "public AudioClip defeatSound;",
                "public AudioClip victorySound;"
            ]
        },
        {
            "fileName": "GameManager.cs",
            "path": "Assets\\Scripts\\Gameplay\\GameManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "GameManager",
            "methods": [
                "private void Awake()",
                "public void StartGameWithPatrons(PatronId[] patrons, ulong seed = 0)",
                "private void Update()",
                "public void OnEndTurnButtonClicked()",
                "public void PlaySingleAIMove()",
                "public void PlayAiTurn()",
                "public void HandleEndTurn(ZoneSide sideCalling)",
                "public void ExecuteMove(Move move, PlayerEnum player)",
                "public void PlayCard(UniqueCard card, ZoneSide side)",
                "public void BuyCard(UniqueCard card, ZoneSide side)",
                "public void ActivateAgent(UniqueCard card, ZoneSide side)",
                "public void AttackAgent(UniqueCard card, ZoneSide side)",
                "public void CallPatron(PatronId patron, ZoneSide side)",
                "public void MakeChoice(List<UniqueCard> selectedCards)",
                "public void MakeChoice(UniqueEffect selectedEffect)",
                "public void HandleEndGame(EndGameState end, Move triggeringMove)",
                "private IEnumerator ShowStartOfHumanTurnRoutine()",
                "public void InitializeDebugGame()",
                "private UniqueCard FindAndRemoveCard(CardId id, List<UniqueCard> availableCards)"
            ],
            "fields": [
                "[SerializeField] private SoTGameManager _soTGameManager; [SerializeField] private UIManager _uiManager; // [SerializeField] private AudioManager _audioManager;",
                "[SerializeField] private AIManager _aiManager; [SerializeField] private PatronManager _patronManager; [SerializeField] private PlayerEnum CurrentTurn = PlayerEnum.NO_PLAYER_SELECTED; [SerializeField] public PlayerEnum HumanPlayer = PlayerEnum.PLAYER1; [SerializeField] public PlayerEnum AIPlayer => HumanPlayer == PlayerEnum.PLAYER1 ? PlayerEnum.PLAYER2 : PlayerEnum.PLAYER1; [Header(\"Debug mode\")] [SerializeField] private bool debugMode = false; [SerializeField] private bool debugPlayerStartsFirst = true; [SerializeField] private List<CardId> debugPlayer1Hand = new(); [SerializeField] private List<CardId> debugPlayer2Hand = new(); [SerializeField] private List<CardId> debugPlayer1Agents = new(); [SerializeField] private List<CardId> debugPlayer2Agents = new(); [SerializeField] private List<CardId> debugPlayer1DrawPile = new(); [SerializeField] private List<CardId> debugPlayer2DrawPile = new(); [SerializeField] private List<CardId> debugTavernCards = new(); [SerializeField] private List<PatronId> debugPatrons = new(); [SerializeField] private int debugPlayer1Prestige = 0; [SerializeField] private int debugPlayer2Prestige = 0; [SerializeField] private int debugPlayer1Power = 0; [SerializeField] private int debugPlayer2Power = 0; [SerializeField] private int debugPlayer1Coins = 0; [SerializeField] private int debugPlayer2Coins = 0; public bool IsDebugMode => debugMode;",
                "public bool IsHumanPlayersTurn => CurrentTurn == HumanPlayer;"
            ]
        },
        {
            "fileName": "GameSetupManager.cs",
            "path": "Assets\\Scripts\\Gameplay\\GameSetupManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "GameSetupManager",
            "methods": [
                "private void Awake()",
                "private void Start()",
                "public void StartInitialSetup(Type selectedBot, PlayerEnum humanPlayer, PlayerEnum botPlayer, bool isDebugMode, string seed)",
                "public void StartGameWithPatrons(List<PatronId> selectedPatrons)",
                "public void ResetAndStartPatronDraft()",
                "private IEnumerator ResetAndStartPatronDraftCoroutine()",
                "private List<PatronId> GetAvailablePatrons()"
            ],
            "fields": [
                "[Header(\"Manager References\")] [SerializeField] private GameManager _gameManager; [SerializeField] private BoardManager _boardManager; [SerializeField] private AIManager _aiManager; [SerializeField] private CompletedActionHistoryBuilder _historyBuilder; [SerializeField] private UIManager _uiManager; [SerializeField] private GameSetupPanelController _setupcontroller; [Header(\"Game Settings\")] private Type _selectedBot;",
                "[SerializeField] private bool botDebugMode = false; public bool IsBotDebugMode => botDebugMode;",
                "private ulong _seed = 0;",
                "private PlayerEnum _humanPlayer;",
                "private PlayerEnum _botPlayer;"
            ]
        },
        {
            "fileName": "SoTGameManager.cs",
            "path": "Assets\\Scripts\\Gameplay\\SoTGameManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "SoTGameManager",
            "methods": [
                "[SerializeField] private CompletedActionProcessor completedActionProcessor; public void InitializeGame(PatronId[] patrons, ulong seed = 0)",
                "public void InitializeDebugGame(FullGameState debugState)",
                "public void RefreshCache(FullGameState newState)",
                "public FullGameState GetCurrentGameState()",
                "public bool IsMoveLegal(Move move)",
                "public bool IsChoicePending()",
                "public void DebugPrintHands(FullGameState state)"
            ],
            "fields": [
                "private IScriptsOfTributeApi _api;",
                "private List<Move> _cachedLegalMoves = new();",
                "private PatronStates _patronStates;",
                "public PatronStates PatronStates => _patronStates;",
                "public List<Move> LegalMoves => _cachedLegalMoves;",
                "public PlayerEnum CurrentPlayer => _api.CurrentPlayerId;"
            ]
        },
        {
            "fileName": "PatronClickable.cs",
            "path": "Assets\\Scripts\\Patrons\\PatronClickable.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "PatronClickable",
            "methods": [
                "public void Initialize(PatronId id)",
                "public void OnPointerClick(PointerEventData eventData)",
                "public void OnPointerExit(PointerEventData eventData)",
                "public void UpdatePatronCircleRotation()",
                "private string GetTooltipText(PatronId id)"
            ],
            "fields": [
                "private PatronId _patronId;",
                "private string _tooltipText;",
                "[SerializeField] private GameObject patronCircle; public PlayerEnum favoring;",
                "private Vector3 _neutralRotate = new Vector3(0f, 0f, 90f);",
                "private Vector3 _player1FavorRotate = new Vector3(0f, 0f, 179f);",
                "private Vector3 _player2FavorRotate = new Vector3(0f, 0f, 1f);"
            ]
        },
        {
            "fileName": "BotLogPanelController.cs",
            "path": "Assets\\Scripts\\UI\\BotLogPanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "BotLogPanelController",
            "methods": [
                "private void Start()",
                "private IEnumerator LogWatcher()",
                "private void Update()",
                "public void OnPointerEnter() => isMouseOver = true;",
                "public void OnPointerExit() => isMouseOver = false;",
                "private void TryAppendNewLogs()",
                "public void Clear()"
            ],
            "fields": [
                "[Header(\"References\")] [SerializeField] private RectTransform panelRoot; [SerializeField] private TMP_InputField logInputField; [SerializeField] private int maxLogsToShow = 100; [Header(\"Animation\")] [SerializeField] private float hiddenX = -240f; [SerializeField] private float visibleX = 0f; [SerializeField] private float slideSpeed = 500f; private bool isMouseOver = false;",
                "private bool isAnimating = false;",
                "private int lastLogIndex = 0;",
                "private StringBuilder _logBuilder = new();"
            ]
        },
        {
            "fileName": "CardLookupPanelController.cs",
            "path": "Assets\\Scripts\\UI\\CardLookupPanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardLookupPanelController",
            "methods": [
                "private void Awake()",
                "public void Show(ZoneSide side, PileType startingPile)",
                "public void Hide()",
                "private void SwitchPile(PileType newPile)",
                "private void UpdateView()",
                "private void UpdateButtonScales()",
                "private Transform GetPileTransform(ZoneSide side, PileType pileType)",
                "private void ClearContent()",
                "private IEnumerator AddToContentCoroutine(List<(UniqueCard card, Sprite sprite, string hpText)> sprites)",
                "private IEnumerator FadeInContent()",
                "private IEnumerator FadeOutAndDisable()"
            ],
            "fields": [
                "[Header(\"UI Elements\")] [SerializeField] private GameObject panelRoot; [SerializeField] private Button playedPileButton; [SerializeField] private Button cooldownPileButton; [SerializeField] private Button drawPileButton; [SerializeField] private Transform cardContentParent; [SerializeField] private GameObject cardPrefab; [SerializeField] private Button closePanelButton; [Header(\"Button Scale Settings\")] [SerializeField] private Vector3 selectedScale = Vector3.one; [SerializeField] private Vector3 unselectedScale = new Vector3(0.8f, 0.8f, 0.8f); [Header(\"Player 1 Zones\")] [SerializeField] private Transform player1DrawPile; [SerializeField] private Transform player1PlayedPile; [SerializeField] private Transform player1CooldownPile; [Header(\"Player 2 Zones\")] [SerializeField] private Transform player2DrawPile; [SerializeField] private Transform player2PlayedPile; [SerializeField] private Transform player2CooldownPile; private Coroutine loadingCoroutine;",
                "private ZoneSide currentSide;",
                "private PileType currentPile;",
                "private bool isClosing = false;"
            ]
        },
        {
            "fileName": "CardUITooltip.cs",
            "path": "Assets\\Scripts\\UI\\CardUITooltip.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardUITooltip",
            "methods": [
                "[SerializeField] private RectTransform thisRect; private void Awake()",
                "public void OnPointerClick(PointerEventData eventData)",
                "public void OnPointerExit(PointerEventData eventData)",
                "public void SetCardData(UniqueCard card)"
            ],
            "fields": [
                "private UniqueCard cardData;"
            ]
        },
        {
            "fileName": "EndTurnHover.cs",
            "path": "Assets\\Scripts\\UI\\EndTurnHover.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "EndTurnHover",
            "methods": [
                "public void OnPointerEnter(PointerEventData eventData)",
                "public void OnPointerExit(PointerEventData eventData)",
                "public void OnPointerClick(PointerEventData eventData)",
                "private void StartFade(float fromAlpha, float toAlpha, System.Action onComplete = null)"
            ],
            "fields": [
                "[SerializeField] private TextMeshProUGUI hoverText; [SerializeField] private float fadeDuration = 0.2f; private Coroutine currentFade;"
            ]
        },
        {
            "fileName": "UIManager.cs",
            "path": "Assets\\Scripts\\UI\\UIManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "UIManager",
            "methods": [
                "private void Awake()",
                "private void Update()",
                "public void ShowSettingsPanel()",
                "public void ShowPatronDraft(List<PatronId> patrons)",
                "public void ShowAiButtons(bool show)",
                "private void OnAiMoveClicked()",
                "private void OnAiFullTurnClicked()",
                "public void ShowChoice(SerializedChoice choice)",
                "public IEnumerator ShowYourTurnMessage()",
                "public void ShowPatronTooltip(string name, string text)",
                "public void HidePatronTooltip()",
                "public void ShowCardTooltip(UniqueCard card, Transform cardWorldTransform)",
                "public void HideCardTooltip()",
                "public void HandleEndGame(EndGameState endGameState, FullGameState finalState)",
                "public void CardLookup(ZoneSide side, PileType startingPile)",
                "public void InitializeCombosPanel(PatronId[] patrons)",
                "public void UpdateCombosPanel(ComboStates comboStates)",
                "private IEnumerator FadeTooltip(float targetAlpha, float duration)",
                "private IEnumerator FadeIn(GameObject panel, float fadeDuration)"
            ],
            "fields": [
                "[Header(\"AI Buttons\")] [SerializeField] private Button aiMoveButton; [SerializeField] private Button aiMoveFullTurnButton; [Header(\"Misc buttons\")] [SerializeField] private Button settingsButton; [SerializeField] private Button homeButton; [Header(\"Choice Panels\")] [SerializeField] private CardChoicePanelController cardChoicePanel; [SerializeField] private EffectChoicePanelController effectChoicePanel; [SerializeField] private PatronSelectionPanel patronSelectionPanel; [Header(\"Normal panels\")] [SerializeField] private CardLookupPanelController cardLookupPanel; [SerializeField] private CombosPanelController combosPanel; [SerializeField] private BotLogPanelController botLogPanel; [SerializeField] private GameObject settingsPanel; [Header(\"Text objects\")] [SerializeField] private GameObject YourTurnImage; [Header(\"Patrons\")] [SerializeField] private GameObject PatronTooltipPanel; [SerializeField] private TextMeshProUGUI PatronTooltipTitle; [SerializeField] private TextMeshProUGUI PatronTooltipText; [Header(\"End game\")] [SerializeField] private EndGameController endGameController; [Header(\"Tooltips\")] [SerializeField] private CardTooltip cardTooltip; private Coroutine fadeCoroutine;"
            ]
        },
        {
            "fileName": "CardUtils.cs",
            "path": "Assets\\Scripts\\Utilities\\CardUtils.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardUtils",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "VisualEffectManager.cs",
            "path": "Assets\\Scripts\\Visuals\\VisualEffectManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "VisualEffectsManager",
            "methods": [
                "[SerializeField] private GameObject powerProjectilePrefab; [SerializeField] private Transform powerOriginPointPlayer1; [SerializeField] private Transform powerOriginPointPlayer2; private void Awake()",
                "public void PlayPowerAttackEffect(Vector3 targetPosition, ZoneSide side, Action? onComplete = null)",
                "public void PlayHealingEffect(GameObject agentObj, ZoneSide side, Action? onComplete = null)"
            ],
            "fields": []
        },
        {
            "fileName": "AgentTierList.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\AgentTierList.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "AgentTier",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "BestMCTS3.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\BestMCTS3.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "MCTSNode",
            "methods": [
                "public double Simulate(MCTSNode node, GameStrategy strategy, SeededRandom rng, ref int moveCount)"
            ],
            "fields": [
                "public SeededGameState gameState;",
                "public double score = 0;",
                "public int visits = 0;",
                "public bool full = false;",
                "public bool endTurn;"
            ]
        },
        {
            "fileName": "BestMCTS3.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\BestMCTS3.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "BestMCTS3",
            "methods": [
                "static public bool CheckIfSameCards(List<UniqueCard> l, List<UniqueCard> r)",
                "static public bool CheckIfSameEffects(List<UniqueEffect> e1, List<UniqueEffect> e2)"
            ],
            "fields": []
        },
        {
            "fileName": "BestMCTS3.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\BestMCTS3.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "PairOnlySecond",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "BestMCTS3.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\BestMCTS3.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "MoveComparer",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "GameStrategy.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\GameStrategy.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "GameStrategy",
            "methods": [
                "public double Heuristic(SeededGameState gameState)",
                "public double CardEvaluation(UniqueCard card, SeededGameState gameState)",
                "public double enemyCardEvaluation(UniqueCard card, SeededGameState gameState)"
            ],
            "fields": []
        },
        {
            "fileName": "GameStrategy.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\GameStrategy.cs",
            "namespaceName": "Bots",
            "kind": "enum",
            "typeName": "GamePhase",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "GameStrategy.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\GameStrategy.cs",
            "namespaceName": "Bots",
            "kind": "enum",
            "typeName": "Param",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "HandTierList.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\HandTierList.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "HandTierList",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "InstantPlayCards.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\InstantPlayCards.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "InstantPlayCards",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "PatronTierList.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\PatronTierList.cs",
            "namespaceName": "Bots",
            "kind": "struct",
            "typeName": "PatronTier",
            "methods": [],
            "fields": [
                "public int Favoured;",
                "public int Neutral;",
                "public int Unfavoured;"
            ]
        },
        {
            "fileName": "PatronTierList.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\PatronTierList.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "PatronTierList",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "TierList.cs",
            "path": "Assets\\Scripts\\AI\\BestMCTS3\\TierList.cs",
            "namespaceName": "Bots",
            "kind": "class",
            "typeName": "GPCardTierList",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "Cardtierlist.cs",
            "path": "Assets\\Scripts\\AI\\CustomBots\\Cardtierlist.cs",
            "namespaceName": "UnityBots",
            "kind": "enum",
            "typeName": "TierEnum",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "Cardtierlist.cs",
            "path": "Assets\\Scripts\\AI\\CustomBots\\Cardtierlist.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "CardTierList",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "PlayRequest",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "PlayResponse",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "SelectPatronRequest",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "SelectPatronResponse",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "GameEndRequest",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "GenericCommand",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "RegisterResponse",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "MoveDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "SimpleCardMoveDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "SimplePatronMoveDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "MakeChoiceMoveCardDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "MakeChoiceMoveEffectDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "EndTurnMoveDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "FullGameStateDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "ComboStateDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "UniqueCardDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "SerializedAgentDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "ChoiceContextDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "SerializedChoiceDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "SerializedPlayerDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "UniqueBaseEffectDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "UniqueEffectDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "UniqueEffectOrDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "UniqueEffectCompositeDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "ClassDefinitions.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\ClassDefinitions.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "EndGameStateDto",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "GrpcBot.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\GrpcBot.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "GrpcBot",
            "methods": [
                "public string Register()",
                "public Move RequestMove(FullGameState fullState, List<Move> legalMoves, TimeSpan timeout)",
                "public PatronId RequestPatron(List<PatronId> patrons, int round)",
                "public void Prepare()",
                "public void NotifyEnd(EndGameState state, FullGameState? finalBoardState)"
            ],
            "fields": []
        },
        {
            "fileName": "GrpcBotAI.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\GrpcBotAI.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "GrpcBotAI",
            "methods": [
                "public void SetFullGameState(FullGameState state)"
            ],
            "fields": [
                "private string _name;"
            ]
        },
        {
            "fileName": "GrpcProxyLauncher.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\GrpcProxyLauncher.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "GrpcProxyLauncher",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "Mapper.cs",
            "path": "Assets\\Scripts\\AI\\gRPC\\Mapper.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "Mapper",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "AgentTierListSOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\AgentTierListSOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "AgentTierSOISMCTS",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "GameStrategySOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\GameStrategySOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "GameStrategySOISMCTS",
            "methods": [
                "public double Heuristic(SeededGameState gameState)",
                "public double CardEvaluation(UniqueCard card, SeededGameState gameState)",
                "public double enemyCardEvaluation(UniqueCard card, SeededGameState gameState)"
            ],
            "fields": []
        },
        {
            "fileName": "GameStrategySOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\GameStrategySOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "enum",
            "typeName": "GamePhase",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "GameStrategySOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\GameStrategySOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "enum",
            "typeName": "Param",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "HandTierListSOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\HandTierListSOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "HandTierListSOISMCTS",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "InstantPlayCards.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\InstantPlayCards.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "InstantPlayCards",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "PatronTierList.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\PatronTierList.cs",
            "namespaceName": "SOISMCTS",
            "kind": "struct",
            "typeName": "PatronTier",
            "methods": [],
            "fields": [
                "public int favoured;",
                "public int neutral;",
                "public int unfavoured;"
            ]
        },
        {
            "fileName": "PatronTierList.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\PatronTierList.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "PatronTierList",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "names",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "enum",
            "typeName": "TierEnum",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "CardTier",
            "methods": [],
            "fields": [
                "public string Name;",
                "public PatronId Deck;",
                "public TierEnum Tier;"
            ]
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "CardTierList",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "PairOnlySecond",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "MoveComparer",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "to",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "SOISMCTS",
            "methods": [
                "private void PrepareForGame()",
                "public InfosetNode prepareRootNodeForNextIteration(Move move, InfosetNode node)",
                "private InfosetNode Expand(InfosetNode selectedNode, List<Move> selectedUVD, List<InfosetNode> pathThroughTree)",
                "public double Rollout(InfosetNode startNode)",
                "private Move selectNextMoveUsingMAST(List<Move> moveList)",
                "private void BackPropagation(double finalPayout, List<InfosetNode> pathThroughTree)",
                "private List<Move> NotEndTurnPossibleMoves(List<Move> possibleMoves)",
                "private List<Move> FilterMoves(List<Move> moves, SeededGameState gameState)",
                "public double HeuristicFromMCTSBot(SeededGameState gameState)",
                "private double NormalizeHeuristic(int value)"
            ],
            "fields": [
                "private bool _treeReuse = false;",
                "private bool _randomDeterminisations = false;",
                "private int _noSimsPerRandomisation = 150;",
                "private bool _useMAST = false;",
                "private double _temperature = 1.0; //parameter for gibbs distribution",
                "private double _thresholdForRandomMoves = 0.1; //parameter to choose a random move instead of move from Gibbs distribution",
                "private bool _filterMoves = true;",
                "private bool _useMCTSBotHeuristic = false;",
                "private bool _useMaxReward = true;",
                "private bool _timeAllocation = false;",
                "private TimeSpan _usedTimeInTurn = TimeSpan.FromSeconds(0); //tracks how long we are spending on current turn",
                "private TimeSpan _timeForMoveComputation; //time limit for current move",
                "private SeededRandom _intRng; //this is used for random integers",
                "private Random _doubleRng;// this is used for random doubles",
                "private Logger _log;",
                "private bool _outputTreeStructureToLogFile = false;",
                "private int _noIterationsPerLog = 100; //how often to output tree structure as we progress through MC loop",
                "private bool _logChosenMove = false;",
                "private bool _startOfTurn = true;",
                "private int _simsCounter; // total number of MCTS simulations for a single game",
                "private int _turnCounter; // total number of turns for a single game",
                "private int _moveCounter; // total number of moves for a single game",
                "private int _movesWithSimsCounter; //total number of moves for a single game which use MCTS simulation loop",
                "private TimeSpan _totalTimeForGame; //time taken for this game",
                "private GameStrategySOISMCTS _strategy = new(10, GamePhase.EarlyGame);"
            ]
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "InfosetNode",
            "methods": [
                "public int GetRefMoveHistoryLength()",
                "public void clearRefHistory()",
                "public void removeMovesFromChildrenMoveHistory(int layer)",
                "private ulong calcHashCode(List<Move> moveHistory)",
                "public void SetCurrentDeterminisationAndMoveHistory(Determinisation? d, List<Move>? currentMoveHistory)",
                "public Move GetCurrentMoveFromParent()",
                "public double UCB(double K)",
                "public InfosetNode CreateChild(Move? parentMove, Determinisation newd)",
                "private bool CheckEquivalence(List<Move>? moveHistory)",
                "private bool checkMovesListAreEqual(List<Move> list1, List<Move> list2)"
            ],
            "fields": [
                "public HashSet<InfosetNode> Children; //list of all children that have been visited from this node irrespective of the determinisation",
                "public double TotalReward;",
                "public double MaxReward;",
                "public int VisitCount;",
                "public int AvailabilityCount;",
                "public double AvgReward;",
                "public double UCBExploration;",
                "public List<Move> _refMoveHistory;",
                "public bool _endTurn;",
                "private ulong _hashCode;"
            ]
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "struct",
            "typeName": "to",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "Determinisation",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "SOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\SOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "MASTMoveKey",
            "methods": [
                "public Move GetMove()"
            ],
            "fields": [
                "private Move _mv;",
                "private int _hashCode;"
            ]
        },
        {
            "fileName": "TierList.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\TierList.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "GPCardTierList",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "TreeReporterSOISMCTS.cs",
            "path": "Assets\\Scripts\\AI\\SOISMCTS\\TreeReporterSOISMCTS.cs",
            "namespaceName": "SOISMCTS",
            "kind": "class",
            "typeName": "TreeReporterSOISMCTS",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "AutoVerticalCenter.cs",
            "path": "Assets\\Scripts\\UI\\ChoicePanel\\AutoVerticalCenter.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "AutoVerticalCenter",
            "methods": [
                "private void Awake()",
                "private void LateUpdate()"
            ],
            "fields": [
                "[SerializeField] private RectTransform content; [SerializeField] private RectTransform viewport; [SerializeField] private ScrollRect scrollRect; [SerializeField] private bool centerWhenTooSmall = true; private RectTransform _wrapper;"
            ]
        },
        {
            "fileName": "CardChoiceButton.cs",
            "path": "Assets\\Scripts\\UI\\ChoicePanel\\CardChoiceButton.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardChoiceButton",
            "methods": [
                "[SerializeField] private Material OGMaterial; private void Awake()",
                "public void Initialize(UniqueCard card, System.Action<UniqueCard> onClick)",
                "private void HandleClick()",
                "private void SetSelected(bool selected)",
                "private void DisableAllEffects()",
                "private void LoadCardSprite(PatronId deck, CardId cardId)",
                "public void FlashRedOutline()"
            ],
            "fields": [
                "[SerializeField] private Image cardImage; [Header(\"Outline Settings\")] [SerializeField] private Color selectedOutlineColor = new Color(0.2f, 1f, 0.2f, 1f); [SerializeField] private Color errorOutlineColor = new Color(1f, 0.2f, 0.2f, 1f); [SerializeField] private float outlineAlpha = 0.255f; [SerializeField] private float outlineGlow = 45.0f; [SerializeField] private float outlineWidth = 0.083f; [SerializeField] private int outlinePixelWidth = 2; private UniqueCard _card;",
                "public UniqueCard Card => _card;",
                "private bool _selected = false;",
                "private Material _materialInstance;"
            ]
        },
        {
            "fileName": "CardChoicePanelController.cs",
            "path": "Assets\\Scripts\\UI\\ChoicePanel\\CardChoicePanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CardChoicePanelController",
            "methods": [
                "private void Awake()",
                "private void StartFade(bool show)",
                "private IEnumerator FadeCoroutine(bool show)",
                "public void ShowCardChoice(SerializedChoice choice)",
                "private void OnCardClicked(UniqueCard card)",
                "public void OnConfirmCardChoice()",
                "public void HideCardChoice()",
                "private string ToDisplayString(ChoiceFollowUp followUp)"
            ],
            "fields": [
                "[Header(\"UI Elements\")] [SerializeField] private GameObject cardChoicePanel; [SerializeField] private TextMeshProUGUI cardChoiceTitle; [SerializeField] private Transform cardContentParent; [SerializeField] private GameObject cardChoiceButtonPrefab; [SerializeField] private ChoiceProgressSlider progressSlider; [SerializeField] private Button confirmButton; private SerializedChoice currentChoice;",
                "private List<UniqueCard> selectedCards = new();",
                "private int minChoices;",
                "private int maxChoices;",
                "private CanvasGroup canvasGroup;",
                "private Coroutine fadeRoutine;",
                "private bool spaceHeld = false;"
            ]
        },
        {
            "fileName": "ChoiceProgressSlider.cs",
            "path": "Assets\\Scripts\\UI\\ChoicePanel\\ChoiceProgressSlider.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "ChoiceProgressSlider",
            "methods": [
                "[Header(\"Config\")] [SerializeField] private int minChoices = 1; [SerializeField] private int maxChoices = 5; [SerializeField] private int selectedCount = 0; [Header(\"References\")] [SerializeField] private Slider slider; [SerializeField] private Image fillImage; [SerializeField] private TextMeshProUGUI sliderText; [Header(\"Colors\")] [SerializeField] private Color tooFewColor = Color.gray; [SerializeField] private Color enoughColor = new Color(0.6f, 1f, 0.6f); // light green [SerializeField] private Color maxedColor = new Color(0.2f, 0.6f, 0.2f); // dark green private void Reset()",
                "public void SetBounds(int min, int max)",
                "public void SetSelectedCount(int count)",
                "private void UpdateVisuals()"
            ],
            "fields": []
        },
        {
            "fileName": "EffectChoiceButton.cs",
            "path": "Assets\\Scripts\\UI\\ChoicePanel\\EffectChoiceButton.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "EffectChoiceButton",
            "methods": [
                "public void Initialize(UniqueEffect effect, Action<UniqueEffect> onClick)",
                "private void OnClick()",
                "public void OnPointerEnter(PointerEventData eventData)",
                "public void OnPointerExit(PointerEventData eventData)",
                "private string GetShortEffectLabel(UniqueEffect effect)",
                "private string GetLongEffectDescription(UniqueEffect effect)"
            ],
            "fields": [
                "[SerializeField] private TextMeshProUGUI effectLabel; [SerializeField] private Button button; [SerializeField] private GameObject tooltipPanel; [SerializeField] private TextMeshProUGUI tooltipText; private UniqueEffect effect;",
                "private Action<UniqueEffect> onClickCallback;"
            ]
        },
        {
            "fileName": "EffectChoicePanelController.cs",
            "path": "Assets\\Scripts\\UI\\ChoicePanel\\EffectChoicePanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "EffectChoicePanelController",
            "methods": [
                "private void Awake()",
                "private void StartFade(bool show)",
                "private IEnumerator FadeCoroutine(bool show)",
                "public void ShowEffectChoice(SerializedChoice choice)",
                "private void OnEffectClicked(UniqueEffect effect)",
                "public void HideEffectChoice()",
                "private string ToDisplayString(ChoiceFollowUp followUp)"
            ],
            "fields": [
                "[Header(\"UI Elements\")] [SerializeField] private GameObject effectChoicePanel; [SerializeField] private TextMeshProUGUI effectChoiceTitle; [SerializeField] private Transform effectContentParent; [SerializeField] private GameObject effectChoiceButtonPrefab; private SerializedChoice currentChoice;",
                "private CanvasGroup canvasGroup;",
                "private Coroutine fadeRoutine;",
                "private bool spaceHeld = false;"
            ]
        },
        {
            "fileName": "ScrollContentAutoCenter.cs",
            "path": "Assets\\Scripts\\UI\\ChoicePanel\\ScrollContentAutoCenter.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "ScrollContentAutoCenter",
            "methods": [
                "private void Awake()",
                "private void LateUpdate()"
            ],
            "fields": [
                "[SerializeField] private RectTransform content; [SerializeField] private RectTransform viewport; private ScrollRect scrollRect;"
            ]
        },
        {
            "fileName": "CombosPanelController.cs",
            "path": "Assets\\Scripts\\UI\\CombosPanel\\CombosPanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CombosPanelController",
            "methods": [
                "private void Awake()",
                "private void Update()",
                "public void OnPointerEnter(PointerEventData eventData)",
                "public void OnPointerExit(PointerEventData eventData)",
                "private void Expand()",
                "private void Collapse()",
                "private void CollapseImmediate()",
                "public void InitializeExpandedView(PatronId[] activePatrons)",
                "public void UpdateCombos(ComboStates states)",
                "private void FillComboZone(Transform zone, List<UniqueBaseEffect> effects)",
                "private void ClearColumn(PatronColumnUI column)",
                "private Sprite GetSpriteForEffect(UniqueBaseEffect effect)",
                "private Sprite LoadPatronSprite(PatronId patronId)"
            ],
            "fields": [
                "[Header(\"References\")] [SerializeField] private GameObject container; [SerializeField] private GameObject focusBackGlow; [SerializeField] private GameObject bg; [SerializeField] private GameObject focusFrontGradient; [Header(\"Config\")] [SerializeField] private float collapsedWidth = 30f; [SerializeField] private float expandedWidth = 600f; [SerializeField] private float expandSpeed = 10f; [Header(\"Content\")] [SerializeField] private GameObject hiddenView; [SerializeField] private GameObject expandedView; [Header(\"Expanded View Columns\")] [SerializeField] private List<PatronColumnUI> patronColumns; [Header(\"Prefabs\")] [SerializeField] private GameObject patronIconPrefab; [SerializeField] private GameObject effectIconPrefab; [Header(\"Effect Sprites Mapping\")] [SerializeField] private List<EffectTypeSpritePair> effectTypeSpritePairs = new(); [SerializeField] private Sprite choiceSpriteIcon; private RectTransform rectTransform;",
                "private bool isExpanded = false;",
                "private bool fullyExpanded = false;"
            ]
        },
        {
            "fileName": "CombosPanelController.cs",
            "path": "Assets\\Scripts\\UI\\CombosPanel\\CombosPanelController.cs",
            "namespaceName": "",
            "kind": "struct",
            "typeName": "EffectTypeSpritePair",
            "methods": [],
            "fields": [
                "public EffectType effectType;",
                "public Sprite sprite;"
            ]
        },
        {
            "fileName": "PatronColumnUI.cs",
            "path": "Assets\\Scripts\\UI\\CombosPanel\\PatronColumnUI.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "PatronColumnUI",
            "methods": [],
            "fields": [
                "public PatronId patronId;",
                "public Transform combo2Zone;",
                "public Transform combo3Zone;",
                "public Transform combo4Zone;"
            ]
        },
        {
            "fileName": "CompletedActionHistoryBuilder.cs",
            "path": "Assets\\Scripts\\UI\\EndGamePanel\\CompletedActionHistoryBuilder.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CompletedActionHistoryBuilder",
            "methods": [
                "[Header(\"References\")] [SerializeField] private Transform contentParent; [SerializeField] private GameObject completedActionUIPrefab; [SerializeField] private Sprite player1Sprite; [SerializeField] private Sprite player2Sprite; [SerializeField] private GameObject loadingSpinner; [Header(\"Settings\")] [SerializeField] private int batchSize = 10; [SerializeField] private float delayBetweenBatches = 0.05f; public void BuildHistory(List<CompletedAction> actions)",
                "public void ClearHistory()",
                "private IEnumerator BuildHistoryCoroutine(List<CompletedAction> actions)",
                "private string GenerateMainText(CompletedAction action)",
                "private string GenerateSubText(List<CompletedAction> actions, int startIndex)"
            ],
            "fields": []
        },
        {
            "fileName": "CompletedActionUI.cs",
            "path": "Assets\\Scripts\\UI\\EndGamePanel\\CompletedActionUI.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CompletedActionUI",
            "methods": [
                "[SerializeField] private Image playerIcon; [SerializeField] private TextMeshProUGUI mainText; [SerializeField] private TextMeshProUGUI subText; public void Initialize(CompletedAction action, Sprite player1Sprite, Sprite player2Sprite, string main, string sub)"
            ],
            "fields": []
        },
        {
            "fileName": "EndGamePanelController.cs",
            "path": "Assets\\Scripts\\UI\\EndGamePanel\\EndGamePanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "EndGameController",
            "methods": [
                "public void Initialize(EndGameState endState, FullGameState finalState)",
                "private void CollectVictoryGraphics()",
                "private IEnumerator PlayEndGameSequence(EndGameState endState, FullGameState finalState)",
                "private void SetGraphicsAlpha(float alpha)",
                "private IEnumerator FadeGraphics(float startAlpha, float endAlpha, float duration)",
                "public void OnPlayAgainButtonClicked()"
            ],
            "fields": [
                "[Header(\"VictoryDefeat References\")] [SerializeField] private GameObject victoryDefeatRoot; [SerializeField] private Image lineImage; [SerializeField] private TextMeshProUGUI victoryDefeatText; [Header(\"EndGamePanel References\")] [SerializeField] private GameObject mainPanel; [SerializeField] private SeedDisplayController seedDisplayController; [SerializeField] private CompletedActionHistoryBuilder completedActionHistoryBuilder; [SerializeField] private GameSummaryPanelController gameSummaryPanelController; [SerializeField] private Button playAgainButton; [Header(\"Animation Settings\")] [SerializeField] private float fadeDuration = 1.0f; [SerializeField] private float victoryDefeatDuration = 2.0f; [SerializeField] private Color victoryColor = new Color(0.1683873f, 0.646306f, 0.8301887f); [SerializeField] private Color defeatColor = new Color(0.8313726f, 0.3090782f, 0.1686275f); private List<Graphic> victoryGraphics = new();"
            ]
        },
        {
            "fileName": "GameSummaryPanelController.cs",
            "path": "Assets\\Scripts\\UI\\EndGamePanel\\GameSummaryPanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "GameSummaryPanelController",
            "methods": [
                "[Header(\"UI References\")] [SerializeField] private TextMeshProUGUI resultText; // \"You won!\" / \"You lost!\" [SerializeField] private TextMeshProUGUI reasonText; [SerializeField] private TextMeshProUGUI prestigeComparisonText; [SerializeField] private Image resultIcon; [Header(\"Settings\")] [SerializeField] private Color victoryColor = new Color(0.1683873f, 0.646306f, 0.8301887f); [SerializeField] private Color defeatColor = new Color(0.8313726f, 0.3090782f, 0.1686275f); [SerializeField] private Sprite playerSprite; [SerializeField] private Sprite opponentSprite; public void SetSummary(PlayerEnum winner, GameEndReason reason, int prestigePlayer, int prestigeOpponent)",
                "private string FormatReason(GameEndReason reason)"
            ],
            "fields": []
        },
        {
            "fileName": "SeedDisplayController.cs",
            "path": "Assets\\Scripts\\UI\\EndGamePanel\\SeedDisplayController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "SeedDisplayController",
            "methods": [
                "private void Awake()",
                "public void SetSeed(ulong seed)",
                "private void OnCopyButtonClicked()"
            ],
            "fields": [
                "[Header(\"UI References\")] [SerializeField] private TextMeshProUGUI seedText; [SerializeField] private Button copyButton; private ulong currentSeed;"
            ]
        },
        {
            "fileName": "BotFrameDisplay.cs",
            "path": "Assets\\Scripts\\UI\\GameSetupUI\\BotFrameDisplay.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "BotFrameDisplay",
            "methods": [
                "public void Setup(BotData data, GameSetupPanelController setupController)",
                "public void OnPointerClick(PointerEventData eventData)",
                "public void Select()",
                "public void Deselect()"
            ],
            "fields": [
                "[Header(\"UI Elementy\")] [SerializeField] private TextMeshProUGUI nameText; [SerializeField] private TextMeshProUGUI shortDescriptionText; [SerializeField] private TextMeshProUGUI longDescriptionText; [SerializeField] private Image avatar; [SerializeField] private GameObject selectionHighlight; private GameSetupPanelController controller;"
            ]
        },
        {
            "fileName": "GameSetupPanelController.cs",
            "path": "Assets\\Scripts\\UI\\GameSetupUI\\GameSetupPanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "BotData",
            "methods": [],
            "fields": [
                "public string Name;",
                "public string ShortDescription;",
                "public string LongDescription;",
                "public Sprite Avatar;",
                "public string TypeName;",
                "[NonSerialized] public Type AIClass;"
            ]
        },
        {
            "fileName": "GameSetupPanelController.cs",
            "path": "Assets\\Scripts\\UI\\GameSetupUI\\GameSetupPanelController.cs",
            "namespaceName": "",
            "kind": "enum",
            "typeName": "PlayerSideSelection",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "GameSetupPanelController.cs",
            "path": "Assets\\Scripts\\UI\\GameSetupUI\\GameSetupPanelController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "GameSetupPanelController",
            "methods": [
                "public void StartSetup()",
                "private List<BotData> GetBuiltinBots()",
                "private List<BotData> LoadExternalBots()",
                "public void SelectBot(BotFrameDisplay frame)",
                "private void SelectSide(PlayerSideSelection side)",
                "private void HighlightButton(Button button, bool active)",
                "private IEnumerator FadeOutAndDisable(CanvasGroup canvasGroup, float duration)"
            ],
            "fields": [
                "[Header(\"Prefab and container\")] [SerializeField] private GameObject mainPanel; [SerializeField] private GameObject botFramePrefab; [SerializeField] private Transform botListContainer; [Header(\"UI elements\")] [SerializeField] private TMP_InputField seedInputField; [SerializeField] private Button confirmButton; [SerializeField] private SwitchButton debugModeButton; [SerializeField] private CanvasGroup canvasGroup; [Header(\"Built-in bots\")] [SerializeField] private Sprite bestMCTS3AvatarSprite; [SerializeField] private Sprite SOISMCTSAvatarSprite; [SerializeField] private Sprite maxPrestigeBotAvatarSprite; [Header(\"Side selection\")] [SerializeField] private Button player1Button; [SerializeField] private Button player2Button; [SerializeField] private Button randomButton; private BotFrameDisplay selectedBot;",
                "private List<BotFrameDisplay> allBotFrames = new();",
                "private PlayerSideSelection selectedSide = PlayerSideSelection.Random;"
            ]
        },
        {
            "fileName": "SwitchButton.cs",
            "path": "Assets\\Scripts\\UI\\GameSetupUI\\SwitchButton.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "SwitchButton",
            "methods": [
                "private void Awake()",
                "private void OnDestroy()",
                "private void Toggle()",
                "public void SetState(bool value)",
                "public bool GetState() => isOn;"
            ],
            "fields": [
                "[SerializeField] private Button button; [SerializeField] private GameObject onView; [SerializeField] private GameObject offView; [SerializeField] private bool startOn = false; private bool isOn;"
            ]
        },
        {
            "fileName": "MainMenuController.cs",
            "path": "Assets\\Scripts\\UI\\MainMenuUI\\MainMenuController.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "MainMenuController",
            "methods": [
                "[Header(\"Panele\")] [SerializeField] private CanvasGroup mainMenuPanel; [SerializeField] private CanvasGroup deckBrowserPanel; [SerializeField] private CanvasGroup settingsPanel; [SerializeField] private CanvasGroup creditsPanel; [SerializeField] private CanvasGroup cardsCarouselPanel; [Header(\"Ustawienia animacji\")] [SerializeField] private float fadeDuration = 0.3f; [Header(\"External links\")] [SerializeField] private string discordUrl = \"https://discord.gg/\"; [SerializeField] private string githubUrl = \"https://github.com/ScriptsOfTribute\"; [SerializeField] private string websiteUrl = \"https://cog2025.inesc-id.pt/tales-of-tribute/\"; [SerializeField] private string esoHubUrl = \"https://eso-hub.com/en/tales-of-tribute-card-game\"; private void Start()",
                "public void OnPlayVsBotClicked()",
                "public void OnDeckBrowserClicked()",
                "public void OnSettingsClicked()",
                "public void OnCreditsClicked()",
                "public void OnExitClicked()",
                "public void OpenDiscord()",
                "public void OpenGithub()",
                "public void OpenWebsite()",
                "private IEnumerator FadeIn(CanvasGroup cg)",
                "private void ShowOnly(CanvasGroup toShow)"
            ],
            "fields": []
        },
        {
            "fileName": "SettingsManager.cs",
            "path": "Assets\\Scripts\\UI\\MainMenuUI\\SettingsManager.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "SettingsManager",
            "methods": [
                "private void Awake()",
                "public void ApplySettings()",
                "public void SaveSettings()",
                "public void LoadSettings()"
            ],
            "fields": [
                "[Header(\"Audio\")] public float masterVolume = 1f;",
                "public float musicVolume = 1f;",
                "public float sfxVolume = 1f;",
                "[Header(\"Display\")] public Resolution[] supportedResolutions;",
                "public FullScreenMode[] supportedModes = new[] {",
                "public int resolutionIndex = 0;",
                "public int screenModeIndex = 0;"
            ]
        },
        {
            "fileName": "SettingsUI.cs",
            "path": "Assets\\Scripts\\UI\\MainMenuUI\\SettingsUI.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "SettingsUI",
            "methods": [
                "private void Start()",
                "private void OnEnable()",
                "public void OnMasterVolumeChanged(float value)",
                "public void OnMusicVolumeChanged(float value)",
                "public void OnSFXVolumeChanged(float value)",
                "public void OnResolutionLeft() => ShiftResolution(-1);",
                "public void OnResolutionRight() => ShiftResolution(+1);",
                "private void ShiftResolution(int dir)",
                "public void OnScreenModeLeft() => ShiftScreenMode(-1);",
                "public void OnScreenModeRight() => ShiftScreenMode(+1);",
                "private void ShiftScreenMode(int dir)",
                "private void UpdateResolutionLabel()",
                "private void UpdateScreenModeLabel()",
                "public void OnApplyClicked()",
                "public void OnExitClicked()",
                "private IEnumerator FadeOut(GameObject panel)",
                "private IEnumerator FadeIn(GameObject panel)"
            ],
            "fields": [
                "[Header(\"Audio Sliders\")] public Slider masterSlider;",
                "public Slider musicSlider;",
                "public Slider sfxSlider;",
                "[Header(\"Resolution Selector\")] public TextMeshProUGUI resolutionText;",
                "[Header(\"Screen Mode Selector\")] public TextMeshProUGUI screenModeText;",
                "[Header(\"Panels\")] public GameObject settingsPanel;",
                "private float originalMaster;",
                "private float originalMusic;",
                "private float originalSFX;"
            ]
        },
        {
            "fileName": "UICardCarousel.cs",
            "path": "Assets\\Scripts\\UI\\MainMenuUI\\UICardCarousel.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "UICardCarouselSprite",
            "methods": [],
            "fields": []
        },
        {
            "fileName": "UICardCarousel.cs",
            "path": "Assets\\Scripts\\UI\\MainMenuUI\\UICardCarousel.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "CarouselSlot",
            "methods": [],
            "fields": [
                "public Vector3 position;",
                "public Vector3 scale;",
                "public float alpha;",
                "public int sortingOrder;",
                "public List<GameObject> cards;",
                "public List<CarouselSlot> slots;",
                "public List<Sprite> cardSprites;",
                "public float transitionTime = 0.5f;",
                "public float delayBetweenCycles = 2f;",
                "private Coroutine currentAnim;",
                "private int currentSpriteIndex = 0;",
                "private List<Vector3> startPos = new();",
                "private List<Vector3> startScale = new();",
                "private List<float> startAlpha = new();"
            ]
        },
        {
            "fileName": "PatronGlowPulsing.cs",
            "path": "Assets\\Scripts\\UI\\PatronSelection\\PatronGlowPulsing.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "PatronGlowPulsing",
            "methods": [
                "public void Initialize(Color color, float glow, float speed = 1f)"
            ],
            "fields": [
                "private Material runtimeMat;",
                "private float speed = 1f;",
                "private Color targetColor;",
                "private float targetGlow;",
                "private float startTimeOffset;"
            ]
        },
        {
            "fileName": "PatronSelectionPanel.cs",
            "path": "Assets\\Scripts\\UI\\PatronSelection\\PatronSelectionPanel.cs",
            "namespaceName": "",
            "kind": "class",
            "typeName": "PatronSelectionPanel",
            "methods": [
                "public void ShowPatronDraft(List<PatronId> patrons)",
                "private void SetUpUI()",
                "private void RefreshUI()",
                "private void OnPatronClicked(PatronId patron)",
                "private IEnumerator HandlePatronPickCoroutine(PatronId patron)",
                "private Sprite LoadPatronSprite(PatronId patronId)"
            ],
            "fields": [
                "[SerializeField] private GameObject panelRoot; [SerializeField] private TextMeshProUGUI draftText; [SerializeField] private Transform patronButtonContainer; [SerializeField] private GameObject patronButtonPrefab; private List<PatronId> availablePatrons;",
                "private List<PatronId> selectedPatrons = new();",
                "private int pickIndex = 0;",
                "private PlayerEnum[] pickOrder = new[] {"
            ]
        },
        {
            "fileName": "Akame.cs",
            "path": "Assets\\Scripts\\AI\\CustomBots\\Akame\\Akame.cs",
            "namespaceName": "UnityBots",
            "kind": "class",
            "typeName": "Akame",
            "methods": [
                "private bool IsInstantMove(Move move, GameState gameState)",
                "private bool IsSafeBaseEffect(UniqueBaseEffect effect)",
                "private bool IsInstantEffect(EffectType type)"
            ],
            "fields": []
        }
    ]
}